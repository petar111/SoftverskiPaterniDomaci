/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import components.IValue;
import components.fields.PanelInputComboBox;
import components.fields.PanelInputDate;
import components.fields.PanelInputTextField;
import java.awt.Component;
import java.awt.GridLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import view.abstractfactory.PersonViewAbstractFactory;
import view.builder.director.PersonViewDirector;
import view.builder.impl.AdvancedPersonViewBuilder;
import view.factory.PersonViewFactory;
import view.factory.impl.AdvancedPersonViewFactory;
import view.factory.impl.SimplePersonViewFactory;

/**
 *
 * @author student1
 */
public class FrmPersonView extends javax.swing.JPanel {

    /**
     * Creates new form FrmPersonView
     */
    public FrmPersonView() {
        initComponents();
        prepareView();
    }

    private FrmPersonView(FrmPersonView original) {
        initComponents();
        
        JPanel originalPersonView = (JPanel)((JPanel)original.getComponent(0)).getComponent(0);
        
        JPanel personViewToAdd = new JPanel(originalPersonView.getLayout());
        
        for (Component component : originalPersonView.getComponents()) {
            
            JPanel panelToAdd = new JPanel();
            
            if(component instanceof PanelInputTextField){
                PanelInputTextField txtFieldOriginal = (PanelInputTextField)component;
                
                PanelInputTextField txtFieldToAdd = new PanelInputTextField();
                txtFieldToAdd.getLblFieldText().setText(txtFieldOriginal.getLblFieldText().getText());
                txtFieldToAdd.getLblError().setText(txtFieldOriginal.getLblError().getText());
                
                Object initValue = txtFieldOriginal.getValue();
                txtFieldToAdd.initialize(initValue);
                
                panelToAdd = txtFieldToAdd;
            }
            
            
            if(component instanceof PanelInputComboBox){
                PanelInputComboBox cboxOriginal = (PanelInputComboBox)component;
                
                PanelInputComboBox cboxToAdd = new PanelInputComboBox();
                cboxToAdd.getLblFieldText().setText(cboxOriginal.getLblFieldText().getText());
                cboxToAdd.getLblError().setText(cboxOriginal.getLblError().getText());
                
                ComboBoxModel model = cboxOriginal.getCbField().getModel();
                List<Object> valuesToAdd = new ArrayList<>();
                
                for (int i = 0; i < model.getSize(); i++) {
                    valuesToAdd.add(model.getElementAt(i));
                }
                
                cboxToAdd.initialize(valuesToAdd);
                
                panelToAdd = cboxToAdd;
            }
            
            if(component instanceof PanelInputDate){
                PanelInputDate dateOriginal = (PanelInputDate)component;
                
                PanelInputDate dateToAdd = new PanelInputDate();
                
                dateToAdd.getLblFieldText().setText(dateOriginal.getLblFieldText().getText());
                dateToAdd.getLblError().setText(dateOriginal.getLblError().getText());
                
                Date selectedDate = (Date)dateOriginal.getValue();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
                Object initValue = sdf.format(selectedDate);
                
                
                dateToAdd.initialize(initValue);
                
                panelToAdd = dateToAdd;
            }
            
            personViewToAdd.add(panelToAdd);
        }
        
        panelPerson.add(personViewToAdd);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSubmit = new javax.swing.JButton();
        panelPerson = new javax.swing.JPanel();

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        panelPerson.setBorder(javax.swing.BorderFactory.createTitledBorder("Person"));
        panelPerson.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 402, Short.MAX_VALUE)
                        .addComponent(btnSubmit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

        String personString = "";
        Component components[] = ((JPanel) panelPerson.getComponent(0)).getComponents();
        for (Component component : components) {
            if (component instanceof IValue) {
                personString += ((IValue) component).getValue() + " ";
            }
        }
        JOptionPane.showMessageDialog(this, personString);
    }//GEN-LAST:event_btnSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JPanel panelPerson;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        
        //factory method
        // PersonViewFactory factory=new SimplePersonViewFactory();
//        PersonViewFactory factory = new AdvancedPersonViewFactory();
//        
//        factory.createPersonView();
//        
//        panelPerson.add(factory.getPersonView());
//        
//        //abstractFactory
//        
//        PersonViewAbstractFactory abstractFactory = new view.abstractfactory.impl.SimplePersonViewFactory();
//        
//        JPanel perosnView = createPersonView(abstractFactory);
//        
//        panelPerson.add(perosnView);
        
        //builder
        
        AdvancedPersonViewBuilder builder = new AdvancedPersonViewBuilder();
        PersonViewDirector director = new PersonViewDirector(builder);
        
        director.construct();
        
        panelPerson.add(builder.getPersonView());

    }

    private JPanel createPersonView(PersonViewAbstractFactory abstractFactory) {
        JPanel personView = new JPanel(new GridLayout(4, 1));
        
        personView.add(abstractFactory.createFirstName());
        personView.add(abstractFactory.createLastName());
        personView.add(abstractFactory.createGender());
        personView.add(abstractFactory.createDate());
        
        return personView;
    }
    
    
    public FrmPersonView Clone(){
        return new FrmPersonView(this);
    }
}
